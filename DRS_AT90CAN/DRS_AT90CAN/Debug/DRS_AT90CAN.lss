
DRS_AT90CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000c12  00000ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000158  0080010e  0080010e  00000cb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b85  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dae  00000000  00000000  00002a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cae  00000000  00000000  000037df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ec  00000000  00000000  00004490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000670  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e3f  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00005d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_16>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_18>
  4c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_19>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000094 <__trampolines_end>:
  94:	7e 6e       	ori	r23, 0xEE	; 238
  96:	7f 62       	ori	r23, 0x2F	; 47
  98:	0c 37       	cpi	r16, 0x7C	; 124
  9a:	26 0c       	add	r2, r6
  9c:	37 12       	cpse	r3, r23
  9e:	0c 37       	cpi	r16, 0x7C	; 124
  a0:	0e 0c       	add	r0, r14
  a2:	37 06       	cpc	r3, r23
  a4:	0c 37       	cpi	r16, 0x7C	; 124
  a6:	02 0c       	add	r0, r2
  a8:	37 00       	.word	0x0037	; ????
  aa:	0c 36       	cpi	r16, 0x6C	; 108

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d8 e0       	ldi	r29, 0x08	; 8
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e2 e1       	ldi	r30, 0x12	; 18
  c0:	fc e0       	ldi	r31, 0x0C	; 12
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 30       	cpi	r26, 0x0E	; 14
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	ae e0       	ldi	r26, 0x0E	; 14
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 36       	cpi	r26, 0x66	; 102
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <main>
  e2:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_find_free_mob>:
{
	#if CAN_TX_BUFFER_SIZE == 0
	if (_free_buffer == 0)
		return 0xff;
	#elif CAN_FORCE_TX_ORDER
	if (_transmission_in_progress)
  ea:	80 91 0e 01 	lds	r24, 0x010E
  ee:	81 11       	cpse	r24, r1
  f0:	16 c0       	rjmp	.+44     	; 0x11e <_find_free_mob+0x34>
	
	uint8_t i;
	for (i = 0;i < 15;i++)
	{
		// load MOb page
		CANPAGE = i << 4;
  f2:	10 92 ed 00 	sts	0x00ED, r1
		
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
  f6:	80 91 ef 00 	lds	r24, 0x00EF
  fa:	80 7c       	andi	r24, 0xC0	; 192
  fc:	91 f0       	breq	.+36     	; 0x122 <_find_free_mob+0x38>
	if (_transmission_in_progress)
		return 0xff;
	#endif
	
	uint8_t i;
	for (i = 0;i < 15;i++)
  fe:	81 e0       	ldi	r24, 0x01	; 1
	{
		// load MOb page
		CANPAGE = i << 4;
 100:	ad ee       	ldi	r26, 0xED	; 237
 102:	b0 e0       	ldi	r27, 0x00	; 0
		
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
 104:	ef ee       	ldi	r30, 0xEF	; 239
 106:	f0 e0       	ldi	r31, 0x00	; 0
	
	uint8_t i;
	for (i = 0;i < 15;i++)
	{
		// load MOb page
		CANPAGE = i << 4;
 108:	98 2f       	mov	r25, r24
 10a:	92 95       	swap	r25
 10c:	90 7f       	andi	r25, 0xF0	; 240
 10e:	9c 93       	st	X, r25
		
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
 110:	90 81       	ld	r25, Z
 112:	90 7c       	andi	r25, 0xC0	; 192
 114:	49 f0       	breq	.+18     	; 0x128 <_find_free_mob+0x3e>
	if (_transmission_in_progress)
		return 0xff;
	#endif
	
	uint8_t i;
	for (i = 0;i < 15;i++)
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	b1 f7       	brne	.-20     	; 0x108 <_find_free_mob+0x1e>
 11c:	04 c0       	rjmp	.+8      	; 0x126 <_find_free_mob+0x3c>
	#if CAN_TX_BUFFER_SIZE == 0
	if (_free_buffer == 0)
		return 0xff;
	#elif CAN_FORCE_TX_ORDER
	if (_transmission_in_progress)
		return 0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	08 95       	ret
	{
		// load MOb page
		CANPAGE = i << 4;
		
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
			return i;
	}
	
	return 0xff;
 126:	8f ef       	ldi	r24, 0xFF	; 255
}
 128:	08 95       	ret

0000012a <_disable_mob_interrupt>:
// ----------------------------------------------------------------------------
// disable interrupt of corresponding MOb

void _disable_mob_interrupt(uint8_t mob)
{
	if (mob < 8)
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	80 f4       	brcc	.+32     	; 0x14e <_disable_mob_interrupt+0x24>
		CANIE2 &= ~(1 << mob);
 12e:	ee ed       	ldi	r30, 0xDE	; 222
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	40 81       	ld	r20, Z
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	b9 01       	movw	r22, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <_disable_mob_interrupt+0x16>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	8a 95       	dec	r24
 142:	e2 f7       	brpl	.-8      	; 0x13c <_disable_mob_interrupt+0x12>
 144:	cb 01       	movw	r24, r22
 146:	80 95       	com	r24
 148:	84 23       	and	r24, r20
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret
	else
		CANIE1 &= ~(1 << (mob - 8));
 14e:	ef ed       	ldi	r30, 0xDF	; 223
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	40 81       	ld	r20, Z
 154:	88 50       	subi	r24, 0x08	; 8
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <_disable_mob_interrupt+0x38>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <_disable_mob_interrupt+0x34>
 166:	cb 01       	movw	r24, r22
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <_enable_mob_interrupt>:
// ----------------------------------------------------------------------------
// enable interrupt of corresponding MOb

void _enable_mob_interrupt(uint8_t mob)
{
	if (mob < 8)
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	78 f4       	brcc	.+30     	; 0x192 <_enable_mob_interrupt+0x22>
		CANIE2 |= (1 << mob);
 174:	ee ed       	ldi	r30, 0xDE	; 222
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	40 81       	ld	r20, Z
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <_enable_mob_interrupt+0x16>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <_enable_mob_interrupt+0x12>
 18a:	cb 01       	movw	r24, r22
 18c:	84 2b       	or	r24, r20
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret
	else
		CANIE1 |= (1 << (mob - 8));
 192:	ef ed       	ldi	r30, 0xDF	; 223
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	40 81       	ld	r20, Z
 198:	88 50       	subi	r24, 0x08	; 8
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_enable_mob_interrupt+0x36>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_enable_mob_interrupt+0x32>
 1aa:	cb 01       	movw	r24, r22
 1ac:	84 2b       	or	r24, r20
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <can_init>:

// ----------------------------------------------------------------------------

bool at90can_init(uint8_t bitrate)
{
	if (bitrate >= 8)
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <can_init+0x6>
 1b6:	43 c0       	rjmp	.+134    	; 0x23e <can_init+0x8c>
		return false;
	
	// switch CAN controller to reset mode
	CANGCON |= (1 << SWRES);
 1b8:	e8 ed       	ldi	r30, 0xD8	; 216
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	90 81       	ld	r25, Z
 1be:	91 60       	ori	r25, 0x01	; 1
 1c0:	90 83       	st	Z, r25
	
	// set CAN Bit Timing
	// (see datasheet page 260)
	CANBT1 = pgm_read_byte(&_at90can_cnf[bitrate][0]);
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	fc 01       	movw	r30, r24
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	e8 0f       	add	r30, r24
 1cc:	f9 1f       	adc	r31, r25
 1ce:	ec 56       	subi	r30, 0x6C	; 108
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	e4 91       	lpm	r30, Z
 1d4:	e0 93 e2 00 	sts	0x00E2, r30
	CANBT2 = pgm_read_byte(&_at90can_cnf[bitrate][1]);
 1d8:	fc 01       	movw	r30, r24
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	eb 56       	subi	r30, 0x6B	; 107
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	e4 91       	lpm	r30, Z
 1e8:	e0 93 e3 00 	sts	0x00E3, r30
	CANBT3 = pgm_read_byte(&_at90can_cnf[bitrate][2]);
 1ec:	fc 01       	movw	r30, r24
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	8e 0f       	add	r24, r30
 1f4:	9f 1f       	adc	r25, r31
 1f6:	fc 01       	movw	r30, r24
 1f8:	ea 56       	subi	r30, 0x6A	; 106
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	e4 91       	lpm	r30, Z
 1fe:	e0 93 e4 00 	sts	0x00E4, r30
	
	// activate CAN transmit- and receive-interrupt
	CANGIT = 0;
 202:	10 92 da 00 	sts	0x00DA, r1
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
 206:	80 eb       	ldi	r24, 0xB0	; 176
 208:	80 93 db 00 	sts	0x00DB, r24
	
	// set timer prescaler to 199 which results in a timer
	// frequency of 10 kHz (at 16 MHz)
	CANTCON = 199;
 20c:	87 ec       	ldi	r24, 0xC7	; 199
 20e:	80 93 e5 00 	sts	0x00E5, r24
	
	// disable all filters
	at90can_disable_filter( 0xff );
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	0e 94 a1 01 	call	0x342	; 0x342 <can_disable_filter>
	
	#if CAN_RX_BUFFER_SIZE > 0
	can_buffer_init( &can_rx_buffer, CAN_RX_BUFFER_SIZE, can_rx_list );
 218:	40 ea       	ldi	r20, 0xA0	; 160
 21a:	51 e0       	ldi	r21, 0x01	; 1
 21c:	60 e1       	ldi	r22, 0x10	; 16
 21e:	80 e6       	ldi	r24, 0x60	; 96
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	0e 94 8d 03 	call	0x71a	; 0x71a <can_buffer_init>
	#endif
	
	#if CAN_TX_BUFFER_SIZE > 0
	can_buffer_init( &can_tx_buffer, CAN_TX_BUFFER_SIZE, can_tx_list );
 226:	4a e3       	ldi	r20, 0x3A	; 58
 228:	51 e0       	ldi	r21, 0x01	; 1
 22a:	68 e0       	ldi	r22, 0x08	; 8
 22c:	8a e9       	ldi	r24, 0x9A	; 154
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 8d 03 	call	0x71a	; 0x71a <can_buffer_init>
	#endif
	
	// activate CAN controller
	CANGCON = (1 << ENASTB);
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	80 93 d8 00 	sts	0x00D8, r24
	
	return true;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	08 95       	ret
// ----------------------------------------------------------------------------

bool at90can_init(uint8_t bitrate)
{
	if (bitrate >= 8)
		return false;
 23e:	80 e0       	ldi	r24, 0x00	; 0
	
	// activate CAN controller
	CANGCON = (1 << ENASTB);
	
	return true;
}
 240:	08 95       	ret

00000242 <__vector_18>:
// ----------------------------------------------------------------------------
// The CANPAGE register have to be restored after usage, otherwise it
// could cause trouble in the application programm.

ISR(CANIT_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	uint8_t canpage;
	uint8_t mob;
	
	if ((CANHPMOB & 0xF0) != 0xF0)
 268:	80 91 ec 00 	lds	r24, 0x00EC
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	80 3f       	cpi	r24, 0xF0	; 240
 270:	09 f4       	brne	.+2      	; 0x274 <__vector_18+0x32>
 272:	46 c0       	rjmp	.+140    	; 0x300 <__vector_18+0xbe>
	{
		// save MOb page register
		canpage = CANPAGE;
 274:	ad ee       	ldi	r26, 0xED	; 237
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	cc 91       	ld	r28, X
		
		// select MOb page with the highest priority
		CANPAGE = CANHPMOB & 0xF0;
 27a:	ec ee       	ldi	r30, 0xEC	; 236
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 7f       	andi	r24, 0xF0	; 240
 282:	8c 93       	st	X, r24
		mob = (CANHPMOB >> 4);
 284:	d0 81       	ld	r29, Z
		
		// a interrupt is only generated if a message was transmitted or received
		if (CANSTMOB & (1 << TXOK))
 286:	90 91 ee 00 	lds	r25, 0x00EE
 28a:	96 ff       	sbrs	r25, 6
 28c:	20 c0       	rjmp	.+64     	; 0x2ce <__vector_18+0x8c>
		{
			// clear MOb
			CANSTMOB &= 0;
 28e:	ee ee       	ldi	r30, 0xEE	; 238
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	10 82       	st	Z, r1
			CANCDMOB = 0;
 296:	10 92 ef 00 	sts	0x00EF, r1
			
			#if CAN_TX_BUFFER_SIZE > 0
			can_t *buf = can_buffer_get_dequeue_ptr(&can_tx_buffer);
 29a:	8a e9       	ldi	r24, 0x9A	; 154
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <can_buffer_get_dequeue_ptr>
			
			// check if there are any another messages waiting 
			if (buf != NULL)
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	61 f0       	breq	.+24     	; 0x2be <__vector_18+0x7c>
			{
				at90can_copy_message_to_mob( buf );
 2a6:	0e 94 a0 02 	call	0x540	; 0x540 <at90can_copy_message_to_mob>
				can_buffer_dequeue(&can_tx_buffer);
 2aa:	8a e9       	ldi	r24, 0x9A	; 154
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <can_buffer_dequeue>
				
				// enable transmission
				CANCDMOB |= (1<<CONMOB0);
 2b2:	ef ee       	ldi	r30, 0xEF	; 239
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	80 83       	st	Z, r24
 2bc:	1e c0       	rjmp	.+60     	; 0x2fa <__vector_18+0xb8>
			}
			else {
				// buffer underflow => no more messages to send
				_disable_mob_interrupt(mob);
 2be:	8d 2f       	mov	r24, r29
 2c0:	82 95       	swap	r24
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	0e 94 95 00 	call	0x12a	; 0x12a <_disable_mob_interrupt>
				_transmission_in_progress = 0;
 2c8:	10 92 0e 01 	sts	0x010E, r1
 2cc:	16 c0       	rjmp	.+44     	; 0x2fa <__vector_18+0xb8>
			CAN_INDICATE_TX_TRAFFIC_FUNCTION;
		}
		else {
			// a message was received successfully
			#if CAN_RX_BUFFER_SIZE > 0
			can_t *buf = can_buffer_get_enqueue_ptr(&can_rx_buffer);
 2ce:	80 e6       	ldi	r24, 0x60	; 96
 2d0:	92 e0       	ldi	r25, 0x02	; 2
 2d2:	0e 94 ac 03 	call	0x758	; 0x758 <can_buffer_get_enqueue_ptr>
			
			if (buf != NULL)
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	31 f0       	breq	.+12     	; 0x2e6 <__vector_18+0xa4>
			{
				// read message
				at90can_copy_mob_to_message( buf );
 2da:	0e 94 18 02 	call	0x430	; 0x430 <at90can_copy_mob_to_message>
				
				// push it to the list
				can_buffer_enqueue(&can_rx_buffer);
 2de:	80 e6       	ldi	r24, 0x60	; 96
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	0e 94 c8 03 	call	0x790	; 0x790 <can_buffer_enqueue>
				// buffer overflow => reject message
				// FIXME inform the user
			}
			
			// clear flags
			CANSTMOB &= 0;
 2e6:	ee ee       	ldi	r30, 0xEE	; 238
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	10 82       	st	Z, r1
			CANCDMOB = (1 << CONMOB1) | (CANCDMOB & (1 << IDE));
 2ee:	ef ee       	ldi	r30, 0xEF	; 239
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	80 71       	andi	r24, 0x10	; 16
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	80 83       	st	Z, r24
			
			CAN_INDICATE_RX_TRAFFIC_FUNCTION;
		}
		
		// restore MOb page register
		CANPAGE = canpage;
 2fa:	c0 93 ed 00 	sts	0x00ED, r28
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <__vector_18+0xc6>
	}
	else
	{
		// no MOb matches with the interrupt => general interrupt
		CANGIT |= 0;
 300:	ea ed       	ldi	r30, 0xDA	; 218
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 83       	st	Z, r24
	}
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_19>:

// ----------------------------------------------------------------------------
// Overflow of CAN timer
ISR(OVRIT_vect) {}
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <can_disable_filter>:

// ----------------------------------------------------------------------------
// disable mob

bool at90can_disable_filter(uint8_t number)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	if (number > 14)
 346:	8f 30       	cpi	r24, 0x0F	; 15
 348:	d0 f0       	brcs	.+52     	; 0x37e <can_disable_filter+0x3c>
	{
		if (number == CAN_ALL_FILTER)
 34a:	8f 3f       	cpi	r24, 0xFF	; 255
 34c:	09 f0       	breq	.+2      	; 0x350 <can_disable_filter+0xe>
 34e:	4e c0       	rjmp	.+156    	; 0x3ec <can_disable_filter+0xaa>
		{
			// disable interrupts
			CANIE1 = 0;
 350:	10 92 df 00 	sts	0x00DF, r1
			CANIE2 = 0;
 354:	10 92 de 00 	sts	0x00DE, r1
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
 358:	80 e0       	ldi	r24, 0x00	; 0
				CANPAGE = (i << 4);
 35a:	cd ee       	ldi	r28, 0xED	; 237
 35c:	d0 e0       	ldi	r29, 0x00	; 0
				
				// disable MOb (read-write required)
				CANCDMOB &= 0;
 35e:	af ee       	ldi	r26, 0xEF	; 239
 360:	b0 e0       	ldi	r27, 0x00	; 0
				CANSTMOB &= 0;
 362:	ee ee       	ldi	r30, 0xEE	; 238
 364:	f0 e0       	ldi	r31, 0x00	; 0
			CANIE1 = 0;
			CANIE2 = 0;
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
				CANPAGE = (i << 4);
 366:	98 2f       	mov	r25, r24
 368:	92 95       	swap	r25
 36a:	90 7f       	andi	r25, 0xF0	; 240
 36c:	98 83       	st	Y, r25
				
				// disable MOb (read-write required)
				CANCDMOB &= 0;
 36e:	9c 91       	ld	r25, X
 370:	1c 92       	st	X, r1
				CANSTMOB &= 0;
 372:	90 81       	ld	r25, Z
 374:	10 82       	st	Z, r1
			// disable interrupts
			CANIE1 = 0;
			CANIE2 = 0;
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	8f 30       	cpi	r24, 0x0F	; 15
 37a:	a9 f7       	brne	.-22     	; 0x366 <can_disable_filter+0x24>
 37c:	39 c0       	rjmp	.+114    	; 0x3f0 <can_disable_filter+0xae>
// enter standby mode => messages are not transmitted nor received

extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
{
	// request abort
	CANGCON = (1 << ABRQ);
 37e:	90 e8       	ldi	r25, 0x80	; 128
 380:	90 93 d8 00 	sts	0x00D8, r25
	
	// wait until receiver is not busy
	while (CANGSTA & (1 << RXBSY))
 384:	e9 ed       	ldi	r30, 0xD9	; 217
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	90 81       	ld	r25, Z
 38a:	93 fd       	sbrc	r25, 3
 38c:	fd cf       	rjmp	.-6      	; 0x388 <can_disable_filter+0x46>
		;
	
	// request standby mode
	CANGCON = 0;
 38e:	10 92 d8 00 	sts	0x00D8, r1
	
	// wait until the CAN Controller has entered standby mode
	while (CANGSTA & (1 << ENFG))
 392:	e9 ed       	ldi	r30, 0xD9	; 217
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	90 81       	ld	r25, Z
 398:	92 fd       	sbrc	r25, 2
 39a:	fd cf       	rjmp	.-6      	; 0x396 <can_disable_filter+0x54>
	}
	
	// set CAN Controller to standby mode
	_enter_standby_mode();
	
	CANPAGE = number << 4;
 39c:	98 2f       	mov	r25, r24
 39e:	92 95       	swap	r25
 3a0:	90 7f       	andi	r25, 0xF0	; 240
 3a2:	cd ee       	ldi	r28, 0xED	; 237
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	98 83       	st	Y, r25
	
	// reset flags
	CANSTMOB &= 0;
 3a8:	ee ee       	ldi	r30, 0xEE	; 238
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	90 81       	ld	r25, Z
 3ae:	10 82       	st	Z, r1
	CANCDMOB = 0;
 3b0:	10 92 ef 00 	sts	0x00EF, r1
	
	_disable_mob_interrupt(number);
 3b4:	0e 94 95 00 	call	0x12a	; 0x12a <_disable_mob_interrupt>
// leave standby mode => CAN Controller is connected to CAN Bus

extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
 3b8:	28 81       	ld	r18, Y
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 3ba:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = i << 4;
 3bc:	ad ee       	ldi	r26, 0xED	; 237
 3be:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = CANCDMOB;
 3c0:	ef ee       	ldi	r30, 0xEF	; 239
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
		CANPAGE = i << 4;
 3c4:	98 2f       	mov	r25, r24
 3c6:	92 95       	swap	r25
 3c8:	90 7f       	andi	r25, 0xF0	; 240
 3ca:	9c 93       	st	X, r25
		CANCDMOB = CANCDMOB;
 3cc:	90 81       	ld	r25, Z
 3ce:	90 83       	st	Z, r25
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	8f 30       	cpi	r24, 0x0F	; 15
 3d4:	b9 f7       	brne	.-18     	; 0x3c4 <can_disable_filter+0x82>
		CANPAGE = i << 4;
		CANCDMOB = CANCDMOB;
	}
	
	// restore CANPAGE
	CANPAGE = canpage;
 3d6:	20 93 ed 00 	sts	0x00ED, r18
	
	// request normal mode
	CANGCON = (1 << ENASTB);
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	80 93 d8 00 	sts	0x00D8, r24
	
	// wait until the CAN Controller has left standby mode
	while ((CANGSTA & (1 << ENFG)) == 0)
 3e0:	e9 ed       	ldi	r30, 0xD9	; 217
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	82 ff       	sbrs	r24, 2
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <can_disable_filter+0xa2>
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <can_disable_filter+0xb2>
			
			return true;
		}
		
		// it is only possible to serve a maximum of 15 filters
		return false;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <can_disable_filter+0xb4>
			
			#if CAN_TX_BUFFER_SIZE == 0
			_free_buffer = 15;
			#endif
			
			return true;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <can_disable_filter+0xb4>
	_disable_mob_interrupt(number);
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <can_get_message>:

#if defined(SUPPORT_FOR_AT90CAN__) && CAN_RX_BUFFER_SIZE > 0

// ----------------------------------------------------------------------------
uint8_t at90can_get_buffered_message(can_t *msg)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ec 01       	movw	r28, r24
	// get pointer to the first buffered message
	can_t *buf = can_buffer_get_dequeue_ptr(&can_rx_buffer);
 402:	80 e6       	ldi	r24, 0x60	; 96
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	0e 94 d7 03 	call	0x7ae	; 0x7ae <can_buffer_get_dequeue_ptr>
 40a:	fc 01       	movw	r30, r24
	
	if (buf == NULL)
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	61 f0       	breq	.+24     	; 0x428 <can_get_message+0x2c>
		return 0;
	
	// copy the message
	memcpy( msg, buf, sizeof(can_t) );
 410:	8c e0       	ldi	r24, 0x0C	; 12
 412:	de 01       	movw	r26, r28
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	8a 95       	dec	r24
 41a:	e1 f7       	brne	.-8      	; 0x414 <can_get_message+0x18>
	
	// delete message from the queue
	can_buffer_dequeue(&can_rx_buffer);
 41c:	80 e6       	ldi	r24, 0x60	; 96
 41e:	92 e0       	ldi	r25, 0x02	; 2
 420:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <can_buffer_dequeue>
	
	return 0xff;
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	01 c0       	rjmp	.+2      	; 0x42a <can_get_message+0x2e>
{
	// get pointer to the first buffered message
	can_t *buf = can_buffer_get_dequeue_ptr(&can_rx_buffer);
	
	if (buf == NULL)
		return 0;
 428:	80 e0       	ldi	r24, 0x00	; 0
	
	// delete message from the queue
	can_buffer_dequeue(&can_rx_buffer);
	
	return 0xff;
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <at90can_copy_mob_to_message>:

#include "at90can_private.h"
#ifdef	SUPPORT_FOR_AT90CAN__

bool at90can_copy_mob_to_message(can_t *msg)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	dc 01       	movw	r26, r24
	// read status
	uint8_t cancdmob = CANCDMOB;
 436:	80 91 ef 00 	lds	r24, 0x00EF
	
	// read length
	msg->length = cancdmob & 0x0f;
 43a:	98 2f       	mov	r25, r24
 43c:	9f 70       	andi	r25, 0x0F	; 15
 43e:	13 96       	adiw	r26, 0x03	; 3
 440:	9c 93       	st	X, r25
 442:	13 97       	sbiw	r26, 0x03	; 3
		msg->flags.extended = 0;
	}
	
	#else
	
	if (cancdmob & (1 << IDE))
 444:	84 fd       	sbrc	r24, 4
 446:	40 c0       	rjmp	.+128    	; 0x4c8 <at90can_copy_mob_to_message+0x98>
		return false;
	}
	else
	{
		// standard identifier
		msg->id  = (uint8_t)  CANIDT2 >> 5;
 448:	80 91 f2 00 	lds	r24, 0x00F2
 44c:	82 95       	swap	r24
 44e:	86 95       	lsr	r24
 450:	87 70       	andi	r24, 0x07	; 7
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	11 96       	adiw	r26, 0x01	; 1
 456:	9c 93       	st	X, r25
 458:	8e 93       	st	-X, r24
		msg->id |= (uint16_t) CANIDT1 << 3;
 45a:	20 91 f3 00 	lds	r18, 0x00F3
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	82 2b       	or	r24, r18
 46e:	93 2b       	or	r25, r19
 470:	11 96       	adiw	r26, 0x01	; 1
 472:	9c 93       	st	X, r25
 474:	8e 93       	st	-X, r24
	}
	
	#endif
	
	if (CANIDT4 & (1 << RTRTAG)) {
 476:	80 91 f0 00 	lds	r24, 0x00F0
 47a:	82 ff       	sbrs	r24, 2
 47c:	08 c0       	rjmp	.+16     	; 0x48e <at90can_copy_mob_to_message+0x5e>
		msg->flags.rtr = 1;
 47e:	12 96       	adiw	r26, 0x02	; 2
 480:	8c 91       	ld	r24, X
 482:	12 97       	sbiw	r26, 0x02	; 2
 484:	81 60       	ori	r24, 0x01	; 1
 486:	12 96       	adiw	r26, 0x02	; 2
 488:	8c 93       	st	X, r24
	
	#if SUPPORT_TIMESTAMPS
	msg->timestamp = CANSTM;
	#endif
	
	return true;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	22 c0       	rjmp	.+68     	; 0x4d2 <at90can_copy_mob_to_message+0xa2>
	
	if (CANIDT4 & (1 << RTRTAG)) {
		msg->flags.rtr = 1;
	}
	else {
		msg->flags.rtr = 0;
 48e:	12 96       	adiw	r26, 0x02	; 2
 490:	8c 91       	ld	r24, X
 492:	12 97       	sbiw	r26, 0x02	; 2
 494:	8e 7f       	andi	r24, 0xFE	; 254
 496:	12 96       	adiw	r26, 0x02	; 2
 498:	8c 93       	st	X, r24
 49a:	12 97       	sbiw	r26, 0x02	; 2
		
		// read data
		uint8_t *p = msg->data;
 49c:	cd 01       	movw	r24, r26
 49e:	04 96       	adiw	r24, 0x04	; 4
		for (uint8_t i = 0;i < msg->length;i++) {
 4a0:	13 96       	adiw	r26, 0x03	; 3
 4a2:	2c 91       	ld	r18, X
 4a4:	13 97       	sbiw	r26, 0x03	; 3
 4a6:	22 23       	and	r18, r18
 4a8:	89 f0       	breq	.+34     	; 0x4cc <at90can_copy_mob_to_message+0x9c>
 4aa:	28 2f       	mov	r18, r24
 4ac:	e8 2f       	mov	r30, r24
 4ae:	f9 2f       	mov	r31, r25
			*p++ = CANMSG;
 4b0:	ca ef       	ldi	r28, 0xFA	; 250
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	88 81       	ld	r24, Y
 4b6:	81 93       	st	Z+, r24
 4b8:	8e 2f       	mov	r24, r30
 4ba:	82 1b       	sub	r24, r18
	else {
		msg->flags.rtr = 0;
		
		// read data
		uint8_t *p = msg->data;
		for (uint8_t i = 0;i < msg->length;i++) {
 4bc:	13 96       	adiw	r26, 0x03	; 3
 4be:	9c 91       	ld	r25, X
 4c0:	13 97       	sbiw	r26, 0x03	; 3
 4c2:	89 17       	cp	r24, r25
 4c4:	b8 f3       	brcs	.-18     	; 0x4b4 <at90can_copy_mob_to_message+0x84>
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <at90can_copy_mob_to_message+0xa0>
	
	#else
	
	if (cancdmob & (1 << IDE))
	{
		return false;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <at90can_copy_mob_to_message+0xa2>
	
	#if SUPPORT_TIMESTAMPS
	msg->timestamp = CANSTM;
	#endif
	
	return true;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <at90can_copy_mob_to_message+0xa2>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <can_send_message>:

#include <string.h>

// -----------------------------------------------------------------------------
uint8_t at90can_send_buffered_message(const can_t *msg)
{
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ec 01       	movw	r28, r24
	// check if there is any free buffer left
#if CAN_FORCE_TX_ORDER
	if (_transmission_in_progress)
 4e0:	80 91 0e 01 	lds	r24, 0x010E
 4e4:	88 23       	and	r24, r24
 4e6:	09 f1       	breq	.+66     	; 0x52a <can_send_message+0x52>
#else
	if (_find_free_mob() == 0xff)
#endif
	{
		can_t *buf = can_buffer_get_enqueue_ptr(&can_tx_buffer); 
 4e8:	8a e9       	ldi	r24, 0x9A	; 154
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 ac 03 	call	0x758	; 0x758 <can_buffer_get_enqueue_ptr>
		
		if (buf == NULL)
 4f0:	00 97       	sbiw	r24, 0x00	; 0
 4f2:	f9 f0       	breq	.+62     	; 0x532 <can_send_message+0x5a>
			return 0;		// buffer full
		
		// copy message to the buffer
		memcpy( buf, msg, sizeof(can_t) );
 4f4:	2c e0       	ldi	r18, 0x0C	; 12
 4f6:	fe 01       	movw	r30, r28
 4f8:	dc 01       	movw	r26, r24
 4fa:	01 90       	ld	r0, Z+
 4fc:	0d 92       	st	X+, r0
 4fe:	2a 95       	dec	r18
 500:	e1 f7       	brne	.-8      	; 0x4fa <can_send_message+0x22>
		// Therefore interrupts have to disabled while putting the message
		// to the queue.
		bool enqueued = false;
		
#if CAN_FORCE_TX_ORDER
		ENTER_CRITICAL_SECTION;
 502:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 504:	f8 94       	cli
		if (_transmission_in_progress)
 506:	80 91 0e 01 	lds	r24, 0x010E
 50a:	88 23       	and	r24, r24
 50c:	31 f0       	breq	.+12     	; 0x51a <can_send_message+0x42>
		{
			can_buffer_enqueue(&can_tx_buffer);
 50e:	8a e9       	ldi	r24, 0x9A	; 154
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 c8 03 	call	0x790	; 0x790 <can_buffer_enqueue>
			enqueued = true;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	01 c0       	rjmp	.+2      	; 0x51c <can_send_message+0x44>
		// in the queue, otherwise the interrupt will be disabled.
		// So, if the transmission finished while we are in this routine the 
		// message will be queued but not send.
		// Therefore interrupts have to disabled while putting the message
		// to the queue.
		bool enqueued = false;
 51a:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 51c:	1f bf       	out	0x3f, r17	; 63
			enqueued = true;
		}
		LEAVE_CRITICAL_SECTION;
#endif
		
		if (enqueued) {
 51e:	81 11       	cpse	r24, r1
 520:	0a c0       	rjmp	.+20     	; 0x536 <can_send_message+0x5e>
			return 1;
		}
		else {
			// buffer gets free while we where preparing the message
			// => send message directly
			return at90can_send_message( msg );
 522:	ce 01       	movw	r24, r28
 524:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <at90can_send_message>
 528:	07 c0       	rjmp	.+14     	; 0x538 <can_send_message+0x60>
		}
	}
	else
	{
		return at90can_send_message( msg );
 52a:	ce 01       	movw	r24, r28
 52c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <at90can_send_message>
 530:	03 c0       	rjmp	.+6      	; 0x538 <can_send_message+0x60>
#endif
	{
		can_t *buf = can_buffer_get_enqueue_ptr(&can_tx_buffer); 
		
		if (buf == NULL)
			return 0;		// buffer full
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	01 c0       	rjmp	.+2      	; 0x538 <can_send_message+0x60>
		}
		LEAVE_CRITICAL_SECTION;
#endif
		
		if (enqueued) {
			return 1;
 536:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return at90can_send_message( msg );
	}
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	08 95       	ret

00000540 <at90can_copy_message_to_mob>:
 * \brief	Copy data form a message in RAM to the actual registers
 * 
 * \warning this function assumes CANPAGE to be set properly before the call
 */
void at90can_copy_message_to_mob(const can_t *msg)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	dc 01       	movw	r26, r24
	// write DLC (Data Length Code)
	CANCDMOB = msg->length;
 546:	13 96       	adiw	r26, 0x03	; 3
 548:	8c 91       	ld	r24, X
 54a:	13 97       	sbiw	r26, 0x03	; 3
 54c:	80 93 ef 00 	sts	0x00EF, r24
		CANIDT1 = (uint16_t) msg->id >> 3;
	}
	
	#else
	
	CANIDT4 = 0;
 550:	10 92 f0 00 	sts	0x00F0, r1
	CANIDT3 = 0;
 554:	10 92 f1 00 	sts	0x00F1, r1
	CANIDT2 = (uint8_t)  msg->id << 5;
 558:	8c 91       	ld	r24, X
 55a:	82 95       	swap	r24
 55c:	88 0f       	add	r24, r24
 55e:	80 7e       	andi	r24, 0xE0	; 224
 560:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = (uint16_t) msg->id >> 3;
 564:	8d 91       	ld	r24, X+
 566:	9c 91       	ld	r25, X
 568:	11 97       	sbiw	r26, 0x01	; 1
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	96 95       	lsr	r25
 570:	87 95       	ror	r24
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	80 93 f3 00 	sts	0x00F3, r24
	
	#endif
	
	if (msg->flags.rtr) {
 57a:	12 96       	adiw	r26, 0x02	; 2
 57c:	8c 91       	ld	r24, X
 57e:	12 97       	sbiw	r26, 0x02	; 2
 580:	80 ff       	sbrs	r24, 0
 582:	06 c0       	rjmp	.+12     	; 0x590 <at90can_copy_message_to_mob+0x50>
		CANIDT4 |= (1<<RTRTAG);
 584:	e0 ef       	ldi	r30, 0xF0	; 240
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	84 60       	ori	r24, 0x04	; 4
 58c:	80 83       	st	Z, r24
 58e:	15 c0       	rjmp	.+42     	; 0x5ba <at90can_copy_message_to_mob+0x7a>
	}
	else {
		const uint8_t *p = msg->data;
 590:	cd 01       	movw	r24, r26
 592:	04 96       	adiw	r24, 0x04	; 4
		for (uint8_t i = 0;i < msg->length;i++) {
 594:	13 96       	adiw	r26, 0x03	; 3
 596:	2c 91       	ld	r18, X
 598:	13 97       	sbiw	r26, 0x03	; 3
 59a:	22 23       	and	r18, r18
 59c:	71 f0       	breq	.+28     	; 0x5ba <at90can_copy_message_to_mob+0x7a>
 59e:	28 2f       	mov	r18, r24
 5a0:	e8 2f       	mov	r30, r24
 5a2:	f9 2f       	mov	r31, r25
			CANMSG = *p++;
 5a4:	ca ef       	ldi	r28, 0xFA	; 250
 5a6:	d0 e0       	ldi	r29, 0x00	; 0
 5a8:	81 91       	ld	r24, Z+
 5aa:	88 83       	st	Y, r24
 5ac:	8e 2f       	mov	r24, r30
 5ae:	82 1b       	sub	r24, r18
	if (msg->flags.rtr) {
		CANIDT4 |= (1<<RTRTAG);
	}
	else {
		const uint8_t *p = msg->data;
		for (uint8_t i = 0;i < msg->length;i++) {
 5b0:	13 96       	adiw	r26, 0x03	; 3
 5b2:	9c 91       	ld	r25, X
 5b4:	13 97       	sbiw	r26, 0x03	; 3
 5b6:	89 17       	cp	r24, r25
 5b8:	b8 f3       	brcs	.-18     	; 0x5a8 <at90can_copy_message_to_mob+0x68>
			CANMSG = *p++;
		}
	}
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <at90can_send_message>:

// ----------------------------------------------------------------------------
uint8_t at90can_send_message(const can_t *msg)
{
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
	// check if there is any free MOb
	uint8_t mob = _find_free_mob();
 5c8:	0e 94 75 00 	call	0xea	; 0xea <_find_free_mob>
 5cc:	18 2f       	mov	r17, r24
	if (mob >= 15)
 5ce:	8f 30       	cpi	r24, 0x0F	; 15
 5d0:	e0 f4       	brcc	.+56     	; 0x60a <at90can_send_message+0x4a>
		return 0;
	
	// load corresponding MOb page ...
	CANPAGE = (mob << 4);
 5d2:	82 95       	swap	r24
 5d4:	80 7f       	andi	r24, 0xF0	; 240
 5d6:	80 93 ed 00 	sts	0x00ED, r24
	
	// clear flags
	CANSTMOB &= 0;
 5da:	ee ee       	ldi	r30, 0xEE	; 238
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	10 82       	st	Z, r1
	
	// ... and copy the data
	at90can_copy_message_to_mob( msg );
 5e2:	ce 01       	movw	r24, r28
 5e4:	0e 94 a0 02 	call	0x540	; 0x540 <at90can_copy_message_to_mob>
	
	// enable interrupt
	_enable_mob_interrupt(mob);
 5e8:	81 2f       	mov	r24, r17
 5ea:	0e 94 b8 00 	call	0x170	; 0x170 <_enable_mob_interrupt>
	
	ENTER_CRITICAL_SECTION;
 5ee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5f0:	f8 94       	cli
	#if CAN_TX_BUFFER_SIZE == 0
		_free_buffer--;
	#elif CAN_FORCE_TX_ORDER
		_transmission_in_progress = 1;
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	90 93 0e 01 	sts	0x010E, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5f8:	8f bf       	out	0x3f, r24	; 63
	#endif
	LEAVE_CRITICAL_SECTION;
	
	// enable transmission
	CANCDMOB |= (1<<CONMOB0);
 5fa:	ef ee       	ldi	r30, 0xEF	; 239
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	80 64       	ori	r24, 0x40	; 64
 602:	80 83       	st	Z, r24
	
	return (mob + 1);
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	81 0f       	add	r24, r17
 608:	01 c0       	rjmp	.+2      	; 0x60c <at90can_send_message+0x4c>
uint8_t at90can_send_message(const can_t *msg)
{
	// check if there is any free MOb
	uint8_t mob = _find_free_mob();
	if (mob >= 15)
		return 0;
 60a:	80 e0       	ldi	r24, 0x00	; 0
	
	// enable transmission
	CANCDMOB |= (1<<CONMOB0);
	
	return (mob + 1);
}
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	08 95       	ret

00000614 <can_set_filter>:
#include "at90can_private.h"
#ifdef	SUPPORT_FOR_AT90CAN__

// ----------------------------------------------------------------------------
bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
{
 614:	db 01       	movw	r26, r22
	if (number > 14) {
 616:	8f 30       	cpi	r24, 0x0F	; 15
 618:	08 f0       	brcs	.+2      	; 0x61c <can_set_filter+0x8>
 61a:	7b c0       	rjmp	.+246    	; 0x712 <can_set_filter+0xfe>
// enter standby mode => messages are not transmitted nor received

extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
{
	// request abort
	CANGCON = (1 << ABRQ);
 61c:	90 e8       	ldi	r25, 0x80	; 128
 61e:	90 93 d8 00 	sts	0x00D8, r25
	
	// wait until receiver is not busy
	while (CANGSTA & (1 << RXBSY))
 622:	e9 ed       	ldi	r30, 0xD9	; 217
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	90 81       	ld	r25, Z
 628:	93 fd       	sbrc	r25, 3
 62a:	fd cf       	rjmp	.-6      	; 0x626 <can_set_filter+0x12>
		;
	
	// request standby mode
	CANGCON = 0;
 62c:	10 92 d8 00 	sts	0x00D8, r1
	
	// wait until the CAN Controller has entered standby mode
	while (CANGSTA & (1 << ENFG))
 630:	e9 ed       	ldi	r30, 0xD9	; 217
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	90 81       	ld	r25, Z
 636:	92 fd       	sbrc	r25, 2
 638:	fd cf       	rjmp	.-6      	; 0x634 <can_set_filter+0x20>
	}
	
	// set CAN Controller to standby mode
	_enter_standby_mode();
	
	CANPAGE = number << 4;
 63a:	98 2f       	mov	r25, r24
 63c:	92 95       	swap	r25
 63e:	90 7f       	andi	r25, 0xF0	; 240
 640:	90 93 ed 00 	sts	0x00ED, r25
	
	CANSTMOB = 0;
 644:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0;
 648:	10 92 ef 00 	sts	0x00EF, r1
		CANIDM1 = (uint16_t) filter->mask >> 3;
	}
	
	#else
	
	CANIDT4 = 0;
 64c:	10 92 f0 00 	sts	0x00F0, r1
	CANIDT3 = 0;
 650:	10 92 f1 00 	sts	0x00F1, r1
	CANIDT2 = (uint8_t)  filter->id << 5;
 654:	9c 91       	ld	r25, X
 656:	92 95       	swap	r25
 658:	99 0f       	add	r25, r25
 65a:	90 7e       	andi	r25, 0xE0	; 224
 65c:	90 93 f2 00 	sts	0x00F2, r25
	CANIDT1 = (uint16_t) filter->id >> 3;
 660:	2d 91       	ld	r18, X+
 662:	3c 91       	ld	r19, X
 664:	11 97       	sbiw	r26, 0x01	; 1
 666:	36 95       	lsr	r19
 668:	27 95       	ror	r18
 66a:	36 95       	lsr	r19
 66c:	27 95       	ror	r18
 66e:	36 95       	lsr	r19
 670:	27 95       	ror	r18
 672:	20 93 f3 00 	sts	0x00F3, r18
	
	CANIDM4 = (1 << IDEMSK);
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	90 93 f4 00 	sts	0x00F4, r25
	CANIDM3 = 0;
 67c:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM2 = (uint8_t)  filter->mask << 5;
 680:	12 96       	adiw	r26, 0x02	; 2
 682:	9c 91       	ld	r25, X
 684:	12 97       	sbiw	r26, 0x02	; 2
 686:	92 95       	swap	r25
 688:	99 0f       	add	r25, r25
 68a:	90 7e       	andi	r25, 0xE0	; 224
 68c:	90 93 f6 00 	sts	0x00F6, r25
	CANIDM1 = (uint16_t) filter->mask >> 3;
 690:	12 96       	adiw	r26, 0x02	; 2
 692:	2d 91       	ld	r18, X+
 694:	3c 91       	ld	r19, X
 696:	13 97       	sbiw	r26, 0x03	; 3
 698:	36 95       	lsr	r19
 69a:	27 95       	ror	r18
 69c:	36 95       	lsr	r19
 69e:	27 95       	ror	r18
 6a0:	36 95       	lsr	r19
 6a2:	27 95       	ror	r18
 6a4:	20 93 f7 00 	sts	0x00F7, r18
	
	#endif
	
	if (filter->flags.rtr & 0x2) {
 6a8:	14 96       	adiw	r26, 0x04	; 4
 6aa:	9c 91       	ld	r25, X
 6ac:	14 97       	sbiw	r26, 0x04	; 4
 6ae:	91 ff       	sbrs	r25, 1
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <can_set_filter+0xba>
		CANIDM4 |= (1 << RTRMSK);
 6b2:	e4 ef       	ldi	r30, 0xF4	; 244
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	90 81       	ld	r25, Z
 6b8:	94 60       	ori	r25, 0x04	; 4
 6ba:	90 83       	st	Z, r25
		
		if (filter->flags.rtr & 0x1)
 6bc:	14 96       	adiw	r26, 0x04	; 4
 6be:	9c 91       	ld	r25, X
 6c0:	90 ff       	sbrs	r25, 0
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <can_set_filter+0xba>
			CANIDT4 |= (1 << RTRMSK);		// only RTR-frames
 6c4:	e0 ef       	ldi	r30, 0xF0	; 240
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	90 81       	ld	r25, Z
 6ca:	94 60       	ori	r25, 0x04	; 4
 6cc:	90 83       	st	Z, r25
	}
	
	CANCDMOB |= (1<<CONMOB1);
 6ce:	ef ee       	ldi	r30, 0xEF	; 239
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	90 81       	ld	r25, Z
 6d4:	90 68       	ori	r25, 0x80	; 128
 6d6:	90 83       	st	Z, r25
	
	_enable_mob_interrupt(number);
 6d8:	0e 94 b8 00 	call	0x170	; 0x170 <_enable_mob_interrupt>
// leave standby mode => CAN Controller is connected to CAN Bus

extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
 6dc:	20 91 ed 00 	lds	r18, 0x00ED
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 6e0:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = i << 4;
 6e2:	ad ee       	ldi	r26, 0xED	; 237
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = CANCDMOB;
 6e6:	ef ee       	ldi	r30, 0xEF	; 239
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
		CANPAGE = i << 4;
 6ea:	98 2f       	mov	r25, r24
 6ec:	92 95       	swap	r25
 6ee:	90 7f       	andi	r25, 0xF0	; 240
 6f0:	9c 93       	st	X, r25
		CANCDMOB = CANCDMOB;
 6f2:	90 81       	ld	r25, Z
 6f4:	90 83       	st	Z, r25
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	8f 30       	cpi	r24, 0x0F	; 15
 6fa:	b9 f7       	brne	.-18     	; 0x6ea <can_set_filter+0xd6>
		CANPAGE = i << 4;
		CANCDMOB = CANCDMOB;
	}
	
	// restore CANPAGE
	CANPAGE = canpage;
 6fc:	20 93 ed 00 	sts	0x00ED, r18
	
	// request normal mode
	CANGCON = (1 << ENASTB);
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	80 93 d8 00 	sts	0x00D8, r24
	
	// wait until the CAN Controller has left standby mode
	while ((CANGSTA & (1 << ENFG)) == 0)
 706:	e9 ed       	ldi	r30, 0xD9	; 217
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	82 ff       	sbrs	r24, 2
 70e:	fd cf       	rjmp	.-6      	; 0x70a <can_set_filter+0xf6>
 710:	02 c0       	rjmp	.+4      	; 0x716 <can_set_filter+0x102>
// ----------------------------------------------------------------------------
bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
{
	if (number > 14) {
		// it is only possible to serve a maximum of 15 filters
		return false;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret
	_enable_mob_interrupt(number);
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
 716:	81 e0       	ldi	r24, 0x01	; 1
}
 718:	08 95       	ret

0000071a <can_buffer_init>:

#if CAN_RX_BUFFER_SIZE > 0 || CAN_TX_BUFFER_SIZE > 0

// -----------------------------------------------------------------------------
void can_buffer_init(can_buffer_t *buf, uint8_t size, can_t *list)
{
 71a:	fc 01       	movw	r30, r24
	ENTER_CRITICAL_SECTION;
 71c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 71e:	f8 94       	cli
	buf->size = size;
 720:	62 83       	std	Z+2, r22	; 0x02
	buf->buf = list;
 722:	51 83       	std	Z+1, r21	; 0x01
 724:	40 83       	st	Z, r20
	
	buf->head = 0;
 726:	14 82       	std	Z+4, r1	; 0x04
	buf->tail = 0;
 728:	15 82       	std	Z+5, r1	; 0x05
	buf->used = 0;
 72a:	13 82       	std	Z+3, r1	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 72c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
 72e:	08 95       	ret

00000730 <can_buffer_empty>:
// -----------------------------------------------------------------------------
bool can_buffer_empty(can_buffer_t *buf)
{
	uint8_t used;
	
	ENTER_CRITICAL_SECTION;
 730:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 732:	f8 94       	cli
	used = buf->used;
 734:	fc 01       	movw	r30, r24
 736:	93 81       	ldd	r25, Z+3	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 738:	2f bf       	out	0x3f, r18	; 63
	LEAVE_CRITICAL_SECTION;
	
	if (used == 0)
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	91 11       	cpse	r25, r1
 73e:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	else
		return false;
}
 740:	08 95       	ret

00000742 <can_buffer_full>:
bool can_buffer_full(can_buffer_t *buf)
{
	uint8_t used;
	uint8_t size;
	
	ENTER_CRITICAL_SECTION;
 742:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 744:	f8 94       	cli
	used = buf->used;
 746:	fc 01       	movw	r30, r24
 748:	23 81       	ldd	r18, Z+3	; 0x03
	size = buf->size;
 74a:	92 81       	ldd	r25, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 74c:	3f bf       	out	0x3f, r19	; 63
	LEAVE_CRITICAL_SECTION;
	
	if (used >= size)
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	29 17       	cp	r18, r25
 752:	08 f4       	brcc	.+2      	; 0x756 <can_buffer_full+0x14>
 754:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	else
		return false;
}
 756:	08 95       	ret

00000758 <can_buffer_get_enqueue_ptr>:

// -----------------------------------------------------------------------------
can_t *can_buffer_get_enqueue_ptr(can_buffer_t *buf)
{
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	ec 01       	movw	r28, r24
	if (can_buffer_full( buf ))
 75e:	0e 94 a1 03 	call	0x742	; 0x742 <can_buffer_full>
 762:	81 11       	cpse	r24, r1
 764:	10 c0       	rjmp	.+32     	; 0x786 <can_buffer_get_enqueue_ptr+0x2e>
		return NULL;
	
	return &buf->buf[buf->head];
 766:	8c 81       	ldd	r24, Y+4	; 0x04
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	9c 01       	movw	r18, r24
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	82 0f       	add	r24, r18
 772:	93 1f       	adc	r25, r19
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	28 81       	ld	r18, Y
 77e:	39 81       	ldd	r19, Y+1	; 0x01
 780:	82 0f       	add	r24, r18
 782:	93 1f       	adc	r25, r19
 784:	02 c0       	rjmp	.+4      	; 0x78a <can_buffer_get_enqueue_ptr+0x32>

// -----------------------------------------------------------------------------
can_t *can_buffer_get_enqueue_ptr(can_buffer_t *buf)
{
	if (can_buffer_full( buf ))
		return NULL;
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
	
	return &buf->buf[buf->head];
}
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	08 95       	ret

00000790 <can_buffer_enqueue>:

// -----------------------------------------------------------------------------
void can_buffer_enqueue(can_buffer_t *buf)
{
 790:	fc 01       	movw	r30, r24
	ENTER_CRITICAL_SECTION;
 792:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 794:	f8 94       	cli
	buf->used ++;
 796:	83 81       	ldd	r24, Z+3	; 0x03
 798:	8f 5f       	subi	r24, 0xFF	; 255
 79a:	83 83       	std	Z+3, r24	; 0x03
	if (++buf->head >= buf->size)
 79c:	84 81       	ldd	r24, Z+4	; 0x04
 79e:	8f 5f       	subi	r24, 0xFF	; 255
 7a0:	84 83       	std	Z+4, r24	; 0x04
 7a2:	22 81       	ldd	r18, Z+2	; 0x02
 7a4:	82 17       	cp	r24, r18
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <can_buffer_enqueue+0x1a>
		buf->head = 0;
 7a8:	14 82       	std	Z+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7aa:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 7ac:	08 95       	ret

000007ae <can_buffer_get_dequeue_ptr>:
	LEAVE_CRITICAL_SECTION;
}

// -----------------------------------------------------------------------------
can_t *can_buffer_get_dequeue_ptr(can_buffer_t *buf)
{
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	ec 01       	movw	r28, r24
	if (can_buffer_empty( buf ))
 7b4:	0e 94 98 03 	call	0x730	; 0x730 <can_buffer_empty>
 7b8:	81 11       	cpse	r24, r1
 7ba:	10 c0       	rjmp	.+32     	; 0x7dc <can_buffer_get_dequeue_ptr+0x2e>
		return NULL;
	
	return &buf->buf[buf->tail];
 7bc:	8d 81       	ldd	r24, Y+5	; 0x05
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	9c 01       	movw	r18, r24
 7c2:	22 0f       	add	r18, r18
 7c4:	33 1f       	adc	r19, r19
 7c6:	82 0f       	add	r24, r18
 7c8:	93 1f       	adc	r25, r19
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	28 81       	ld	r18, Y
 7d4:	39 81       	ldd	r19, Y+1	; 0x01
 7d6:	82 0f       	add	r24, r18
 7d8:	93 1f       	adc	r25, r19
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <can_buffer_get_dequeue_ptr+0x32>

// -----------------------------------------------------------------------------
can_t *can_buffer_get_dequeue_ptr(can_buffer_t *buf)
{
	if (can_buffer_empty( buf ))
		return NULL;
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
	
	return &buf->buf[buf->tail];
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <can_buffer_dequeue>:

// -----------------------------------------------------------------------------
void can_buffer_dequeue(can_buffer_t *buf)
{
 7e6:	fc 01       	movw	r30, r24
	ENTER_CRITICAL_SECTION;
 7e8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7ea:	f8 94       	cli
	buf->used --;
 7ec:	83 81       	ldd	r24, Z+3	; 0x03
 7ee:	81 50       	subi	r24, 0x01	; 1
 7f0:	83 83       	std	Z+3, r24	; 0x03
	if (++buf->tail >= buf->size)
 7f2:	85 81       	ldd	r24, Z+5	; 0x05
 7f4:	8f 5f       	subi	r24, 0xFF	; 255
 7f6:	85 83       	std	Z+5, r24	; 0x05
 7f8:	22 81       	ldd	r18, Z+2	; 0x02
 7fa:	82 17       	cp	r24, r18
 7fc:	08 f0       	brcs	.+2      	; 0x800 <can_buffer_dequeue+0x1a>
		buf->tail = 0;
 7fe:	15 82       	std	Z+5, r1	; 0x05
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 800:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 802:	08 95       	ret

00000804 <DrsPwmInit>:
#define OCR1B_CLOSE 10000         // 11000
#define OCR1B_OPEN 7000           // 5400

void DrsPwmInit()
{
	DDRB |= (1<<DDB5)|(1<<DDB6); //  do ko�ca nie wiem czy to konieczne
 804:	84 b1       	in	r24, 0x04	; 4
 806:	80 66       	ori	r24, 0x60	; 96
 808:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = (0b11 & WGM1setting)|(1<<COM1A1)|(1<<COM1B1);
 80a:	82 ea       	ldi	r24, 0xA2	; 162
 80c:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b11000 & (WGM1setting << 3);
 810:	e1 e8       	ldi	r30, 0x81	; 129
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 e1       	ldi	r24, 0x10	; 16
 816:	80 83       	st	Z, r24
	TCCR1C = 0;
 818:	10 92 82 00 	sts	0x0082, r1
	TIMSK1 = 0;
 81c:	10 92 6f 00 	sts	0x006F, r1
	
	TCNT1 = 0;
 820:	10 92 85 00 	sts	0x0085, r1
 824:	10 92 84 00 	sts	0x0084, r1
	ICR1 = ICR1_TOP;
 828:	80 eb       	ldi	r24, 0xB0	; 176
 82a:	9b eb       	ldi	r25, 0xBB	; 187
 82c:	90 93 87 00 	sts	0x0087, r25
 830:	80 93 86 00 	sts	0x0086, r24
	OCR1A = OCR1A_CLOSE;
 834:	88 e5       	ldi	r24, 0x58	; 88
 836:	9b e1       	ldi	r25, 0x1B	; 27
 838:	90 93 89 00 	sts	0x0089, r25
 83c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = OCR1B_CLOSE;
 840:	80 e1       	ldi	r24, 0x10	; 16
 842:	97 e2       	ldi	r25, 0x27	; 39
 844:	90 93 8b 00 	sts	0x008B, r25
 848:	80 93 8a 00 	sts	0x008A, r24
	
	// start
	TCCR1B |= PRESCALER_1;
 84c:	80 81       	ld	r24, Z
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 83       	st	Z, r24
 852:	08 95       	ret

00000854 <DrsOpen>:
}

void DrsOpen()
{
	if( DRS_state == 1 ) return; // juz otwarte wiec nic nie rob
 854:	80 91 39 01 	lds	r24, 0x0139
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	79 f0       	breq	.+30     	; 0x87a <DrsOpen+0x26>
	OCR1A = OCR1A_OPEN;
 85c:	80 e1       	ldi	r24, 0x10	; 16
 85e:	97 e2       	ldi	r25, 0x27	; 39
 860:	90 93 89 00 	sts	0x0089, r25
 864:	80 93 88 00 	sts	0x0088, r24
	OCR1B = OCR1B_OPEN;
 868:	88 e5       	ldi	r24, 0x58	; 88
 86a:	9b e1       	ldi	r25, 0x1B	; 27
 86c:	90 93 8b 00 	sts	0x008B, r25
 870:	80 93 8a 00 	sts	0x008A, r24
	DRS_state = 1;
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	80 93 39 01 	sts	0x0139, r24
 87a:	08 95       	ret

0000087c <DrsClose>:
}

void DrsClose()
{
	if( DRS_state == 0 ) return; // juz zamkniete wiec nic nie rob
 87c:	80 91 39 01 	lds	r24, 0x0139
 880:	88 23       	and	r24, r24
 882:	71 f0       	breq	.+28     	; 0x8a0 <DrsClose+0x24>
	OCR1A = OCR1A_CLOSE;
 884:	88 e5       	ldi	r24, 0x58	; 88
 886:	9b e1       	ldi	r25, 0x1B	; 27
 888:	90 93 89 00 	sts	0x0089, r25
 88c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = OCR1B_CLOSE;
 890:	80 e1       	ldi	r24, 0x10	; 16
 892:	97 e2       	ldi	r25, 0x27	; 39
 894:	90 93 8b 00 	sts	0x008B, r25
 898:	80 93 8a 00 	sts	0x008A, r24
	DRS_state = 0;
 89c:	10 92 39 01 	sts	0x0139, r1
 8a0:	08 95       	ret

000008a2 <__vector_16>:
CrsClose();
}
}
*/
ISR(TIMER0_COMP_vect)
{
 8a2:	1f 92       	push	r1
 8a4:	0f 92       	push	r0
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	0f 92       	push	r0
 8aa:	11 24       	eor	r1, r1
 8ac:	8f 92       	push	r8
 8ae:	9f 92       	push	r9
 8b0:	af 92       	push	r10
 8b2:	bf 92       	push	r11
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ef 92       	push	r14
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	2f 93       	push	r18
 8c2:	3f 93       	push	r19
 8c4:	4f 93       	push	r20
 8c6:	5f 93       	push	r21
 8c8:	6f 93       	push	r22
 8ca:	7f 93       	push	r23
 8cc:	8f 93       	push	r24
 8ce:	9f 93       	push	r25
 8d0:	af 93       	push	r26
 8d2:	bf 93       	push	r27
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
	static uint64_t DRS_state_msg_next_tick = 100;
	TCNT0 = 0;
 8dc:	16 bc       	out	0x26, r1	; 38
	timer_counter++;
 8de:	20 91 30 01 	lds	r18, 0x0130
 8e2:	30 91 31 01 	lds	r19, 0x0131
 8e6:	40 91 32 01 	lds	r20, 0x0132
 8ea:	50 91 33 01 	lds	r21, 0x0133
 8ee:	60 91 34 01 	lds	r22, 0x0134
 8f2:	70 91 35 01 	lds	r23, 0x0135
 8f6:	80 91 36 01 	lds	r24, 0x0136
 8fa:	90 91 37 01 	lds	r25, 0x0137
 8fe:	a1 e0       	ldi	r26, 0x01	; 1
 900:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__adddi3_s8>
 904:	20 93 30 01 	sts	0x0130, r18
 908:	30 93 31 01 	sts	0x0131, r19
 90c:	40 93 32 01 	sts	0x0132, r20
 910:	50 93 33 01 	sts	0x0133, r21
 914:	60 93 34 01 	sts	0x0134, r22
 918:	70 93 35 01 	sts	0x0135, r23
 91c:	80 93 36 01 	sts	0x0136, r24
 920:	90 93 37 01 	sts	0x0137, r25
	
	// old timer_counter % 100 == 0
	// trigger wysylania ramki can ze statusem drsu dla aima
	if(timer_counter >= DRS_state_msg_next_tick )
 924:	20 91 30 01 	lds	r18, 0x0130
 928:	30 91 31 01 	lds	r19, 0x0131
 92c:	40 91 32 01 	lds	r20, 0x0132
 930:	50 91 33 01 	lds	r21, 0x0133
 934:	60 91 34 01 	lds	r22, 0x0134
 938:	70 91 35 01 	lds	r23, 0x0135
 93c:	80 91 36 01 	lds	r24, 0x0136
 940:	90 91 37 01 	lds	r25, 0x0137
 944:	80 90 00 01 	lds	r8, 0x0100
 948:	90 90 01 01 	lds	r9, 0x0101
 94c:	d0 91 02 01 	lds	r29, 0x0102
 950:	c0 91 03 01 	lds	r28, 0x0103
 954:	b0 91 04 01 	lds	r27, 0x0104
 958:	a0 91 05 01 	lds	r26, 0x0105
 95c:	f0 91 06 01 	lds	r31, 0x0106
 960:	e0 91 07 01 	lds	r30, 0x0107
 964:	a8 2c       	mov	r10, r8
 966:	b9 2c       	mov	r11, r9
 968:	cd 2e       	mov	r12, r29
 96a:	dc 2e       	mov	r13, r28
 96c:	eb 2e       	mov	r14, r27
 96e:	fa 2e       	mov	r15, r26
 970:	0f 2f       	mov	r16, r31
 972:	1e 2f       	mov	r17, r30
 974:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__cmpdi2>
 978:	f0 f0       	brcs	.+60     	; 0x9b6 <__stack+0xb7>
	{
		DRS_state_msg_next_tick += 100;
 97a:	28 2d       	mov	r18, r8
 97c:	39 2d       	mov	r19, r9
 97e:	4d 2f       	mov	r20, r29
 980:	5c 2f       	mov	r21, r28
 982:	6b 2f       	mov	r22, r27
 984:	7a 2f       	mov	r23, r26
 986:	8f 2f       	mov	r24, r31
 988:	9e 2f       	mov	r25, r30
 98a:	a4 e6       	ldi	r26, 0x64	; 100
 98c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__adddi3_s8>
 990:	20 93 00 01 	sts	0x0100, r18
 994:	30 93 01 01 	sts	0x0101, r19
 998:	40 93 02 01 	sts	0x0102, r20
 99c:	50 93 03 01 	sts	0x0103, r21
 9a0:	60 93 04 01 	sts	0x0104, r22
 9a4:	70 93 05 01 	sts	0x0105, r23
 9a8:	80 93 06 01 	sts	0x0106, r24
 9ac:	90 93 07 01 	sts	0x0107, r25
		DRS_state_msg_trig = 1;
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	80 93 27 01 	sts	0x0127, r24
	}
	
	// jesli uplynie czas odświeżenia wiadomości CAN to zamknij DRS
	if( DRS_timer_count + DRS_MAX_OPEN_TICKS < timer_counter ){
 9b6:	20 91 28 01 	lds	r18, 0x0128
 9ba:	30 91 29 01 	lds	r19, 0x0129
 9be:	40 91 2a 01 	lds	r20, 0x012A
 9c2:	50 91 2b 01 	lds	r21, 0x012B
 9c6:	60 91 2c 01 	lds	r22, 0x012C
 9ca:	70 91 2d 01 	lds	r23, 0x012D
 9ce:	80 91 2e 01 	lds	r24, 0x012E
 9d2:	90 91 2f 01 	lds	r25, 0x012F
 9d6:	a0 90 30 01 	lds	r10, 0x0130
 9da:	b0 90 31 01 	lds	r11, 0x0131
 9de:	c0 90 32 01 	lds	r12, 0x0132
 9e2:	d0 90 33 01 	lds	r13, 0x0133
 9e6:	e0 90 34 01 	lds	r14, 0x0134
 9ea:	f0 90 35 01 	lds	r15, 0x0135
 9ee:	00 91 36 01 	lds	r16, 0x0136
 9f2:	10 91 37 01 	lds	r17, 0x0137
 9f6:	2c 50       	subi	r18, 0x0C	; 12
 9f8:	3e 4f       	sbci	r19, 0xFE	; 254
 9fa:	4f 4f       	sbci	r20, 0xFF	; 255
 9fc:	5f 4f       	sbci	r21, 0xFF	; 255
 9fe:	6f 4f       	sbci	r22, 0xFF	; 255
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__cmpdi2>
 a0a:	28 f4       	brcc	.+10     	; 0xa16 <__stack+0x117>
		// wyjebka DRSa
		//DRS_available = 0;
		CAN_frame_timeout_flag = 1;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	80 93 38 01 	sts	0x0138, r24
		DrsClose();
 a12:	0e 94 3e 04 	call	0x87c	; 0x87c <DrsClose>
	}
}
 a16:	ff 91       	pop	r31
 a18:	ef 91       	pop	r30
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	bf 91       	pop	r27
 a20:	af 91       	pop	r26
 a22:	9f 91       	pop	r25
 a24:	8f 91       	pop	r24
 a26:	7f 91       	pop	r23
 a28:	6f 91       	pop	r22
 a2a:	5f 91       	pop	r21
 a2c:	4f 91       	pop	r20
 a2e:	3f 91       	pop	r19
 a30:	2f 91       	pop	r18
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	ff 90       	pop	r15
 a38:	ef 90       	pop	r14
 a3a:	df 90       	pop	r13
 a3c:	cf 90       	pop	r12
 a3e:	bf 90       	pop	r11
 a40:	af 90       	pop	r10
 a42:	9f 90       	pop	r9
 a44:	8f 90       	pop	r8
 a46:	0f 90       	pop	r0
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	0f 90       	pop	r0
 a4c:	1f 90       	pop	r1
 a4e:	18 95       	reti

00000a50 <LedInit>:
	DRS_state = 0;
}

void LedInit()
{
	DDRB |= 1<<DDB0 | 1<<DDB2 | 1<<DDB3;
 a50:	84 b1       	in	r24, 0x04	; 4
 a52:	8d 60       	ori	r24, 0x0D	; 13
 a54:	84 b9       	out	0x04, r24	; 4
	PORTB = ~((~PORTB) | (1<<DDB0 | 1<<DDB2 | 1<<DDB3)); // wyzerowanie odpowiednich bit�w
 a56:	85 b1       	in	r24, 0x05	; 5
 a58:	82 7f       	andi	r24, 0xF2	; 242
 a5a:	85 b9       	out	0x05, r24	; 5
 a5c:	08 95       	ret

00000a5e <LedThread>:
}

void LedThread( )
{
	// DDB0 status DRS
	if(DRS_state == 1) PORTB |= 1<<DDB0;
 a5e:	80 91 39 01 	lds	r24, 0x0139
 a62:	81 30       	cpi	r24, 0x01	; 1
 a64:	11 f4       	brne	.+4      	; 0xa6a <LedThread+0xc>
 a66:	28 9a       	sbi	0x05, 0	; 5
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <LedThread+0xe>
	else PORTB = ~((~PORTB)|(1<<DDB0));
 a6a:	28 98       	cbi	0x05, 0	; 5
	// DDB2 can frame problem
	if(CAN_frame_timeout_flag == 1) PORTB |= 1<<DDB2;
 a6c:	80 91 38 01 	lds	r24, 0x0138
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	11 f4       	brne	.+4      	; 0xa78 <LedThread+0x1a>
 a74:	2a 9a       	sbi	0x05, 2	; 5
 a76:	08 95       	ret
	else PORTB = ~((~PORTB)|(1<<DDB2));
 a78:	2a 98       	cbi	0x05, 2	; 5
 a7a:	08 95       	ret

00000a7c <TickTimerInit>:
void TickTimerInit(){
	// fcpu 16 MHz
	// preskaler 64
	// comp 249
	// 16 000 000 / (64 * (249+1)) = 16000 ---> 1ms
	TCCR0A = 1<<CS1 | 1 << CS0;
 a7c:	83 e0       	ldi	r24, 0x03	; 3
 a7e:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
 a80:	16 bc       	out	0x26, r1	; 38
	OCR0A = 249;
 a82:	99 ef       	ldi	r25, 0xF9	; 249
 a84:	97 bd       	out	0x27, r25	; 39
	TIFR0 = 0b11; // clearing interrupt flags
 a86:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 1<<OCIE0A;
 a88:	82 e0       	ldi	r24, 0x02	; 2
 a8a:	80 93 6e 00 	sts	0x006E, r24
 a8e:	08 95       	ret

00000a90 <CanThread>:

void CanThread()
{
	static can_t rx_message; // received message structure
	static can_t tx_message;
	if(can_get_message(&rx_message))
 a90:	8b e1       	ldi	r24, 0x1B	; 27
 a92:	91 e0       	ldi	r25, 0x01	; 1
 a94:	0e 94 fe 01 	call	0x3fc	; 0x3fc <can_get_message>
 a98:	88 23       	and	r24, r24
 a9a:	09 f4       	brne	.+2      	; 0xa9e <CanThread+0xe>
 a9c:	6e c0       	rjmp	.+220    	; 0xb7a <CanThread+0xea>
	{
		//debug dostaje ramki
		//PORTB ^= 1 << DDB3;
		// ramka odebrana hamulca
		if( rx_message.id == FRAME_DRS_SWITCH_ID && rx_message.length == 8)
 a9e:	80 91 1b 01 	lds	r24, 0x011B
 aa2:	90 91 1c 01 	lds	r25, 0x011C
 aa6:	01 97       	sbiw	r24, 0x01	; 1
 aa8:	09 f0       	breq	.+2      	; 0xaac <CanThread+0x1c>
 aaa:	67 c0       	rjmp	.+206    	; 0xb7a <CanThread+0xea>
 aac:	80 91 1e 01 	lds	r24, 0x011E
 ab0:	88 30       	cpi	r24, 0x08	; 8
 ab2:	a9 f5       	brne	.+106    	; 0xb1e <CanThread+0x8e>
		{
			DRS_timer_count = timer_counter;
 ab4:	70 91 30 01 	lds	r23, 0x0130
 ab8:	60 91 31 01 	lds	r22, 0x0131
 abc:	50 91 32 01 	lds	r21, 0x0132
 ac0:	40 91 33 01 	lds	r20, 0x0133
 ac4:	30 91 34 01 	lds	r19, 0x0134
 ac8:	20 91 35 01 	lds	r18, 0x0135
 acc:	90 91 36 01 	lds	r25, 0x0136
 ad0:	80 91 37 01 	lds	r24, 0x0137
 ad4:	70 93 28 01 	sts	0x0128, r23
 ad8:	60 93 29 01 	sts	0x0129, r22
 adc:	50 93 2a 01 	sts	0x012A, r21
 ae0:	40 93 2b 01 	sts	0x012B, r20
 ae4:	30 93 2c 01 	sts	0x012C, r19
 ae8:	20 93 2d 01 	sts	0x012D, r18
 aec:	90 93 2e 01 	sts	0x012E, r25
 af0:	80 93 2f 01 	sts	0x012F, r24
			CAN_frame_timeout_flag = 0;
 af4:	10 92 38 01 	sts	0x0138, r1
			
			//debug dostaje ramki przycisku
			//PORTB ^= 1 << DDB3;
			
			if((rx_message.data[FRAME_DRS_SWITCH_BYTE]>>FRAME_DRS_SWITCH_BIT)&0x01)
 af8:	80 91 26 01 	lds	r24, 0x0126
 afc:	82 ff       	sbrs	r24, 2
 afe:	07 c0       	rjmp	.+14     	; 0xb0e <CanThread+0x7e>
				//debug zinterpretowany przycisk otwarcia DRSu
				//PORTB ^= 1 << DDB3;
				
				// sygna� otwarcia Drsa
				// timestamp
				if(DRS_available){
 b00:	80 91 08 01 	lds	r24, 0x0108
 b04:	88 23       	and	r24, r24
 b06:	29 f0       	breq	.+10     	; 0xb12 <CanThread+0x82>
					DrsOpen();
 b08:	0e 94 2a 04 	call	0x854	; 0x854 <DrsOpen>
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <CanThread+0x82>
				//debug zinterpretowany przycisk zamkniecia DRSu
				//PORTB ^= 1 << DDB3;
				
				// sygna� zamkniecia Drsa
				// timestamp nie ustawiany, drs zamknie się automatycznie w przerwaniu po ustalonym czasie
				DrsClose();
 b0e:	0e 94 3e 04 	call	0x87c	; 0x87c <DrsClose>
			}
		}
		if( rx_message.id == FRAME_BRAKE_ID )
 b12:	80 91 1b 01 	lds	r24, 0x011B
 b16:	90 91 1c 01 	lds	r25, 0x011C
 b1a:	01 97       	sbiw	r24, 0x01	; 1
 b1c:	71 f5       	brne	.+92     	; 0xb7a <CanThread+0xea>
		{
			DRS_timer_count = timer_counter;
 b1e:	70 91 30 01 	lds	r23, 0x0130
 b22:	60 91 31 01 	lds	r22, 0x0131
 b26:	50 91 32 01 	lds	r21, 0x0132
 b2a:	40 91 33 01 	lds	r20, 0x0133
 b2e:	30 91 34 01 	lds	r19, 0x0134
 b32:	20 91 35 01 	lds	r18, 0x0135
 b36:	90 91 36 01 	lds	r25, 0x0136
 b3a:	80 91 37 01 	lds	r24, 0x0137
 b3e:	70 93 28 01 	sts	0x0128, r23
 b42:	60 93 29 01 	sts	0x0129, r22
 b46:	50 93 2a 01 	sts	0x012A, r21
 b4a:	40 93 2b 01 	sts	0x012B, r20
 b4e:	30 93 2c 01 	sts	0x012C, r19
 b52:	20 93 2d 01 	sts	0x012D, r18
 b56:	90 93 2e 01 	sts	0x012E, r25
 b5a:	80 93 2f 01 	sts	0x012F, r24
			CAN_frame_timeout_flag = 0;
 b5e:	10 92 38 01 	sts	0x0138, r1
			
			if((rx_message.data[FRAME_BRAKE_BYTE]>>FRAME_BRAKE_BIT)&0x01 == 1)
 b62:	80 91 26 01 	lds	r24, 0x0126
 b66:	80 ff       	sbrs	r24, 0
 b68:	05 c0       	rjmp	.+10     	; 0xb74 <CanThread+0xe4>
			{
				DRS_available = 0; // drs not available
 b6a:	10 92 08 01 	sts	0x0108, r1
				DrsClose();
 b6e:	0e 94 3e 04 	call	0x87c	; 0x87c <DrsClose>
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <CanThread+0xea>
			}
			else
			{
				// drs available after braking stop
				DRS_available = 1;
 b74:	81 e0       	ldi	r24, 0x01	; 1
 b76:	80 93 08 01 	sts	0x0108, r24
			}
		}
		
	}
	if(DRS_state_msg_trig == 1)
 b7a:	80 91 27 01 	lds	r24, 0x0127
 b7e:	81 30       	cpi	r24, 0x01	; 1
 b80:	b9 f4       	brne	.+46     	; 0xbb0 <CanThread+0x120>
	{
		DRS_state_msg_trig = 0;
 b82:	10 92 27 01 	sts	0x0127, r1
		
		tx_message.id = FRAME_DRS_STATUS_ID; // 13
 b86:	10 92 10 01 	sts	0x0110, r1
 b8a:	10 92 0f 01 	sts	0x010F, r1
		tx_message.flags.rtr = 0;
 b8e:	e1 e1       	ldi	r30, 0x11	; 17
 b90:	f1 e0       	ldi	r31, 0x01	; 1
 b92:	80 81       	ld	r24, Z
 b94:	8e 7f       	andi	r24, 0xFE	; 254
 b96:	80 83       	st	Z, r24
		tx_message.length = 1;
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	80 93 12 01 	sts	0x0112, r24
		tx_message.data[0] = (DRS_state&0x01)<<FRAME_DRS_STATUS_BIT;
 b9e:	80 91 39 01 	lds	r24, 0x0139
 ba2:	81 70       	andi	r24, 0x01	; 1
 ba4:	80 93 13 01 	sts	0x0113, r24
		can_send_message(&tx_message);
 ba8:	8f e0       	ldi	r24, 0x0F	; 15
 baa:	91 e0       	ldi	r25, 0x01	; 1
 bac:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <can_send_message>
 bb0:	08 95       	ret

00000bb2 <main>:
void CanThread();

int main(void)
{
	// preskaler zegara cpu na 1
	asm("ldi r16,0x80");
 bb2:	00 e8       	ldi	r16, 0x80	; 128
	asm("sts 0x61,r16"); //CLKPR
 bb4:	00 93 61 00 	sts	0x0061, r16
	asm("sts 0x61,r16"); // CLKPR
 bb8:	00 93 61 00 	sts	0x0061, r16
	
	LedInit();
 bbc:	0e 94 28 05 	call	0xa50	; 0xa50 <LedInit>
	DrsPwmInit();
 bc0:	0e 94 02 04 	call	0x804	; 0x804 <DrsPwmInit>
	TickTimerInit();
 bc4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <TickTimerInit>

	can_init(BITRATE_1_MBPS);
 bc8:	87 e0       	ldi	r24, 0x07	; 7
 bca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <can_init>
	can_set_filter(1, &filtersetup);
 bce:	69 e0       	ldi	r22, 0x09	; 9
 bd0:	71 e0       	ldi	r23, 0x01	; 1
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	0e 94 0a 03 	call	0x614	; 0x614 <can_set_filter>
	//msg.data[3] = 0x04;

	//can_send_message(&msg);

	// odblokowane przerwania dla CANa
	sei();
 bd8:	78 94       	sei

	//can_t rxmsg;

	while(1)
	{
		CanThread();
 bda:	0e 94 48 05 	call	0xa90	; 0xa90 <CanThread>
		LedThread();
 bde:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LedThread>
 be2:	fb cf       	rjmp	.-10     	; 0xbda <main+0x28>

00000be4 <__adddi3_s8>:
 be4:	00 24       	eor	r0, r0
 be6:	a7 fd       	sbrc	r26, 7
 be8:	00 94       	com	r0
 bea:	2a 0f       	add	r18, r26
 bec:	30 1d       	adc	r19, r0
 bee:	40 1d       	adc	r20, r0
 bf0:	50 1d       	adc	r21, r0
 bf2:	60 1d       	adc	r22, r0
 bf4:	70 1d       	adc	r23, r0
 bf6:	80 1d       	adc	r24, r0
 bf8:	90 1d       	adc	r25, r0
 bfa:	08 95       	ret

00000bfc <__cmpdi2>:
 bfc:	2a 15       	cp	r18, r10
 bfe:	3b 05       	cpc	r19, r11
 c00:	4c 05       	cpc	r20, r12
 c02:	5d 05       	cpc	r21, r13
 c04:	6e 05       	cpc	r22, r14
 c06:	7f 05       	cpc	r23, r15
 c08:	80 07       	cpc	r24, r16
 c0a:	91 07       	cpc	r25, r17
 c0c:	08 95       	ret

00000c0e <_exit>:
 c0e:	f8 94       	cli

00000c10 <__stop_program>:
 c10:	ff cf       	rjmp	.-2      	; 0xc10 <__stop_program>
